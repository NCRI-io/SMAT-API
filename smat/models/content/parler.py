# generated by datamodel-codegen:
#   filename:  sample.json
#   timestamp: 2021-02-12T19:55:40+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel


class _Shards(BaseModel):
    total: int
    successful: int
    skipped: int
    failed: int


class Total(BaseModel):
    value: int
    relation: str


class _Source(BaseModel):
    article: Optional[bool] = None
    body: str
    bodywithurls: str
    comments: int
    createdAt: str
    createdAtformatted: str
    creator: str
    datatype: str
    depth: int
    depthRaw: int
    followers: int
    following: int
    hashtags: List
    id: str
    impressions: Optional[int] = None
    lastseents: str
    links: List
    media: int
    name: str
    parent: Optional[str] = None
    posts: int
    preview: Optional[str] = None
    reposts: Optional[int] = None
    sensitive: bool
    shareLink: str
    state: Optional[int] = None
    upvotes: int
    urls: List
    userid: str
    username: str
    verified: bool
    color: Optional[str] = None
    commentDepth: Optional[int] = None
    controversy: Optional[int] = None
    downvotes: Optional[str] = None
    isPrimary: Optional[bool] = None
    post: Optional[str] = None
    score: Optional[int] = None


class Hit(BaseModel):
    _index: str
    _type: str
    _id: str
    _score: float
    _source: _Source


class Hits(BaseModel):
    total: Total
    max_score: float
    hits: List[Hit]


class ParlerContent(BaseModel):
    created_key: str
    content_key: str
    took: int
    timed_out: bool
    _shards: _Shards
    hits: Hits
