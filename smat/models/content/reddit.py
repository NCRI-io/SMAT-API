# generated by datamodel-codegen:
#   filename:  sample.json
#   timestamp: 2021-02-12T19:50:11+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel


class _Shards(BaseModel):
    total: int
    successful: int
    skipped: int
    failed: int


class _Source(BaseModel):
    author_flair_richtext: List
    author_patreon_flair: bool
    mod_note: Any
    body: str
    total_awards_received: int
    link_id: int
    subreddit: str
    subreddit_id: int
    send_replies: bool
    score: int
    author_flair_text_color: Any
    mod_reason_title: Any
    is_submitter: bool
    author_premium: bool
    created_utc: int
    locked: bool
    author_fullname: str
    author: str
    treatment_tags: List
    author_flair_background_color: Any
    associated_award: Any
    author_flair_template_id: Any
    gildings: Dict[str, Any]
    stickied: bool
    all_awardings: List
    mod_reason_by: Any
    comment_type: Any
    parent_id: Optional[int] = None
    retrieved_on: int
    top_awarded_type: Any
    no_follow: bool
    collapsed_because_crowd_control: Any
    author_flair_type: str
    awarders: List
    permalink: str


class Hit(BaseModel):
    _index: str
    _type: str
    _id: str
    _score: float
    _source: _Source


class Hits(BaseModel):
    total: int
    max_score: float
    hits: List[Hit]


class RedditContent(BaseModel):
    created_key: str
    content_key: str
    took: int
    timed_out: bool
    _shards: _Shards
    hits: Hits
