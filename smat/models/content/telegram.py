# generated by datamodel-codegen:
#   filename:  sample.json
#   timestamp: 2021-02-12T19:57:42+00:00

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel


class _Shards(BaseModel):
    total: int
    successful: int
    skipped: int
    failed: int


class Total(BaseModel):
    value: int
    relation: str


class FromidItem(BaseModel):
    reformatted_key: str
    user_id: int


class Peerid(BaseModel):
    reformatted_key: str
    channel_id: int


class Reply(BaseModel):
    reformatted_key: str
    max_id: Any
    replies: int
    comments: bool
    channel_id: Any
    read_max_id: Any
    replies_pts: int
    recent_repliers: List


class _Source(BaseModel):
    reformattedkey: str
    v: int
    date: int
    post: bool
    views: Optional[int]
    pinned: bool
    silent: bool
    fromid: Union[Any, FromidItem]
    message: str
    peerid: Peerid
    replies: Union[Any, Reply]
    entities: List
    forwards: Optional[int]
    fwdfrom: Any
    replyto: Any
    editdate: Any
    edithide: bool
    groupedid: Any
    viabotid: Any
    postauthor: Any
    channelabout: str
    channeltitle: str
    channelusername: str
    media: Optional[Any] = None


class Hit(BaseModel):
    _index: str
    _type: str
    _id: str
    _score: float
    _source: _Source


class Hits(BaseModel):
    total: Total
    max_score: float
    hits: List[Hit]


class TelegramContent(BaseModel):
    created_key: str
    content_key: str
    took: int
    timed_out: bool
    _shards: _Shards
    hits: Hits
