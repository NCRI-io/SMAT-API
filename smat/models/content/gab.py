# generated by datamodel-codegen:
#   filename:  sample.json
#   timestamp: 2021-02-12T19:55:00+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field


class _Shards(BaseModel):
    total: int
    successful: int
    skipped: int
    failed: int


class Total(BaseModel):
    value: int
    relation: str


class Link(BaseModel):
    name: str
    value: str
    verified_at: Any


class Account(BaseModel):
    acct: str
    avatar: str
    avatar_static: str
    bot: bool
    created_at: str
    display_name: str
    emojis: List
    links: List[Link] = Field(alias="fields")
    followers_count: int
    following_count: int
    header: str
    header_static: str
    id: str
    is_donor: bool
    is_flagged_as_spam: bool
    is_investor: bool
    is_pro: bool
    is_verified: bool
    locked: bool
    note: str
    statuses_count: int
    url: str
    username: str


class Card(BaseModel):
    description: str
    embed_url: str
    height: int
    html: str
    id: int
    image: str
    provider_name: str
    provider_url: str
    title: str
    type: str
    updated_at: str
    url: str
    width: int


class Original(BaseModel):
    aspect: float
    height: int
    size: str
    width: int


class Small(BaseModel):
    aspect: float
    height: int
    size: str
    width: int


class Meta(BaseModel):
    original: Original
    small: Small


class Mediaattachment(BaseModel):
    blurhash: str
    description: Any
    file_content_type: str
    id: str
    meta: Meta
    preview_url: str
    remote_url: Any
    source_mp4: Any
    text_url: str
    type: str
    url: str


class Mention(BaseModel):
    acct: str
    id: str
    url: str
    username: str


class _Source(BaseModel):
    account: Account
    bookmarkcollectionid: Any
    card: Card
    content: str
    createdat: str
    emojis: List
    expiresat: Any
    favouritescount: int
    group: Any
    hasquote: bool
    id: str
    inreplytoaccountid: Any
    inreplytoid: Any
    language: str
    mediaattachments: List[Mediaattachment]
    mentions: List[Mention]
    pinnable: bool
    pinnablebygroup: bool
    plainmarkdown: Any
    poll: Any
    quoteofid: Optional[str]
    reblogscount: int
    repliescount: int
    revisedat: Any
    richcontent: str
    sensitive: bool
    spoilertext: str
    tags: List
    url: str
    visibility: str


class Hit(BaseModel):
    _index: str
    _type: str
    _id: str
    _score: float
    _source: _Source


class Hits(BaseModel):
    total: Total
    max_score: float
    hits: List[Hit]


class GabContent(BaseModel):
    created_key: str
    content_key: str
    took: int
    timed_out: bool
    _shards: _Shards
    hits: Hits
